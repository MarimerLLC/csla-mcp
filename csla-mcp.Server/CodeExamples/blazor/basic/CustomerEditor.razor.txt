@page "/customers"
@using MyApp.Library
@inject IJSRuntime JSRuntime
@implements IDisposable

<h3>Customer Management</h3>

@if (Customer != null)
{
    <EditForm Model="Customer" OnValidSubmit="SaveCustomer">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Name:</label>
            <InputText id="name" class="form-control" @bind-Value="Customer.Name" />
            <ValidationMessage For="@(() => Customer.Name)" />
        </div>

        <div class="form-group">
            <label for="email">Email:</label>
            <InputText id="email" class="form-control" @bind-Value="Customer.Email" />
            <ValidationMessage For="@(() => Customer.Email)" />
        </div>

        @if (Customer.CanWriteProperty(Customer.SalaryProperty))
        {
            <div class="form-group">
                <label for="salary">Salary:</label>
                <InputNumber id="salary" class="form-control" @bind-Value="Customer.Salary" />
                <ValidationMessage For="@(() => Customer.Salary)" />
            </div>
        }

        <div class="form-group">
            <button type="submit" class="btn btn-primary" disabled="@(!Customer.IsSavable)">
                Save
            </button>
            <button type="button" class="btn btn-secondary" @onclick="CancelEdit">
                Cancel
            </button>
        </div>

        @if (Customer.IsBusy)
        {
            <div class="alert alert-info">
                <i class="fa fa-spinner fa-spin"></i> Saving...
            </div>
        }

        @if (Customer.BrokenRulesCollection.Count > 0)
        {
            <div class="alert alert-danger">
                <h5>Validation Errors:</h5>
                <ul>
                    @foreach (var rule in Customer.BrokenRulesCollection)
                    {
                        <li>@rule.Description</li>
                    }
                </ul>
            </div>
        }
    </EditForm>
}

@code {
    [Parameter] public int? CustomerId { get; set; }
    
    private Customer? Customer { get; set; }
    private Customer? OriginalCustomer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (CustomerId.HasValue)
        {
            Customer = await DataPortal.FetchAsync<Customer>(CustomerId.Value);
        }
        else
        {
            Customer = await DataPortal.CreateAsync<Customer>();
        }
        
        // Keep a copy for cancel functionality
        OriginalCustomer = Customer.Clone();
        
        // Subscribe to property changed events for reactive UI
        Customer.PropertyChanged += OnPropertyChanged;
    }

    private void OnPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        // Trigger UI refresh when properties change
        InvokeAsync(StateHasChanged);
    }

    private async Task SaveCustomer()
    {
        try
        {
            Customer = await Customer.SaveAsync();
            await JSRuntime.InvokeVoidAsync("alert", "Customer saved successfully!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving customer: {ex.Message}");
        }
    }

    private void CancelEdit()
    {
        if (OriginalCustomer != null)
        {
            Customer = OriginalCustomer.Clone();
            Customer.PropertyChanged += OnPropertyChanged;
        }
    }

    public void Dispose()
    {
        if (Customer != null)
        {
            Customer.PropertyChanged -= OnPropertyChanged;
        }
    }
}